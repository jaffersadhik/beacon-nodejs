import { AfterViewChecked, Component, OnInit, ViewChild } from "@angular/core";
import { ControlContainer } from "@angular/forms";
import { CONSTANTS } from "src/app/shared/campaigns.constants";
import { QuickSMSCampaignService } from "../../quick-sms/service/quick-sms-campaigns-service";
import { CampaignsService } from "src/app/campaigns/campaigns.service";;

@Component({
  selector: 'app-campaign-name-template',
  templateUrl: './campaign-name-template.component.html',
  styleUrls: ['./campaign-name-template.component.css']
})
export class CampaignNameTemplateComponent implements OnInit {
  public campaignNameInfoTxt = CONSTANTS.INFO_TXT.campaignName;

  public uniqueNameError = CONSTANTS.ERROR_DISPLAY.uniqueCampaignName;

  public splCharsError = CONSTANTS.ERROR_DISPLAY.campaignNameSplChars;

  public allowedSplChars = CONSTANTS.allowed_special_characters;

  public minLengthError = CONSTANTS.ERROR_DISPLAY.campaignNameMinLength;

  public maxLengthError = CONSTANTS.ERROR_DISPLAY.campaignNameMaxLength;

  public minimumLength = CONSTANTS.minLengthCampaignName;

  public maximumLength = CONSTANTS.maxLengthCampaignName;

  public campaignNameFormGroup: any;

  public checkUniqueApiError = 'Something went wrong. Please try again';

  public loading$ = this.quickSMSCampaignService.loadingcampaignNames$.asObservable();

  campUniqueErr = false;

  apiError = false;
  prevCampName = "";

  constructor(
      private quickSMSCampaignService: QuickSMSCampaignService,
      public controlContainer: ControlContainer,
      public c_service: CampaignsService
  ) {}

  // @ViewChild(CampaignNameComponent, { static: false })
  // c_name: CampaignNameComponent;
  
  ngOnInit(): void {
      this.campaignNameFormGroup = this.controlContainer.control;
      const user = this.c_service.getUser();
         const prePopulateCampNam = user.autogen_cname_yn;
        
        if (prePopulateCampNam == 1) {
          this.autoGenerateAndChkUniqueness();
        }
		
    }
    autoGenerateAndChkUniqueness(){
        this.c_service.preSetCampaignName(this.campaignNameFormGroup,'CT');
        
          this.apiToCheckUniqueness(this.name.value.trim(), true)
        
    }
  
  get name() {
      return this.campaignNameFormGroup.controls.name;
  }

  retry(){
    
    const focus = document.getElementById("name") as HTMLImageElement;
    focus.focus();
    focus.blur();
  }

  
  chkUniqueCampaignNameExists(event: any) {
     
      let cname = (event.target.value as string).trim();
      
      if(this.prevCampName == "" ||  this.prevCampName != cname.toLowerCase().trim()) 
        {
          this.apiToCheckUniqueness(cname, false)
        }
      
       
    }
    apiToCheckUniqueness(cname: string, isAutoGenerated : boolean ){
      
      this.c_service.campaignTempErr = false;
      this.c_service.campaignTempApiErr = true;

      this.campUniqueErr = false;
      this.apiError = false;
      
      this.name.setValue(cname);
      if((cname.length >0 && !this.name.errors) || isAutoGenerated ){
          
   
      cname = cname.toLowerCase();
      this.quickSMSCampaignService
          .checkUniqueCampaignNames(cname)
          .subscribe(
              res => {
                this.c_service.campaignTempApiErr = false;
                this.apiError =false;
                this.prevCampName = cname.trim();
                  
                  if(res.statusCode > 299 || res.statusCode < 200){
                     
                    
                  }else if( !res.isUnique){
                    this.campUniqueErr = true;
                    this.c_service.campaignTempErr = true
                    if(isAutoGenerated){
                      this.autoGenerateAndChkUniqueness();
                  }
                  
                  }
              },
              (err) => {
                this.apiError = true;
                this.c_service.campaignTempApiErr = true;
                
              //    this.campaignNameFormGroup.controls.name.setErrors({
              //        apiRequestError: true });
                  
              }

          );
            }
  }

  focus() {
      const focus = document.getElementById("name") as HTMLImageElement;
      focus.focus();
      // focus.scrollIntoView();
  }
 

}
